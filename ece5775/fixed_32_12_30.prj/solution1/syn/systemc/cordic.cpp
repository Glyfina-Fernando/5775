// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> cordic::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> cordic::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> cordic::ap_ST_st3_fsm_2 = "10";
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_5E600000 = "1011110011000000000000000000000";
const sc_lv<5> cordic::ap_const_lv5_0 = "00000";
const sc_lv<5> cordic::ap_const_lv5_1E = "11110";
const sc_lv<5> cordic::ap_const_lv5_1 = "1";
const sc_lv<20> cordic::ap_const_lv20_0 = "00000000000000000000";

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    angles_U = new cordic_angles("angles_U");
    angles_U->clk(ap_clk);
    angles_U->reset(ap_rst);
    angles_U->address0(angles_address0);
    angles_U->ce0(angles_ce0);
    angles_U->q0(angles_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_T_V_1_fu_163_p2);
    sensitive << ( p_Val2_s_reg_95 );
    sensitive << ( p_Val2_1_fu_140_p2 );

    SC_METHOD(thread_T_V_fu_146_p2);
    sensitive << ( p_Val2_s_reg_95 );
    sensitive << ( p_Val2_1_fu_140_p2 );

    SC_METHOD(thread_X_V_2_fu_169_p3);
    sensitive << ( tmp_2_fu_135_p2 );
    sensitive << ( T_V_fu_146_p2 );
    sensitive << ( T_V_1_fu_163_p2 );

    SC_METHOD(thread_Y_V_fu_215_p2);
    sensitive << ( p_Val2_3_reg_82 );
    sensitive << ( p_Val2_3_pn_fu_202_p3 );

    SC_METHOD(thread_angles_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_6_fu_158_p1 );

    SC_METHOD(thread_angles_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );

    SC_METHOD(thread_c_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );
    sensitive << ( p_Val2_s_reg_95 );

    SC_METHOD(thread_c_V_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );

    SC_METHOD(thread_current_V_fu_208_p3);
    sensitive << ( tmp_2_reg_234 );
    sensitive << ( p_Val2_8_fu_185_p2 );
    sensitive << ( p_Val2_5_fu_196_p2 );

    SC_METHOD(thread_exitcond_fu_123_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sh_assign_reg_107 );

    SC_METHOD(thread_p_Val2_1_fu_140_p2);
    sensitive << ( p_Val2_3_reg_82 );
    sensitive << ( sh_assign_cast1_fu_119_p1 );

    SC_METHOD(thread_p_Val2_2_fu_152_p2);
    sensitive << ( p_Val2_s_reg_95 );
    sensitive << ( sh_assign_cast1_fu_119_p1 );

    SC_METHOD(thread_p_Val2_3_pn_fu_202_p3);
    sensitive << ( tmp_2_reg_234 );
    sensitive << ( p_Val2_2_reg_240 );
    sensitive << ( p_Val2_s_7_fu_191_p2 );

    SC_METHOD(thread_p_Val2_5_fu_196_p2);
    sensitive << ( p_Val2_4_reg_70 );
    sensitive << ( tmp_s_fu_177_p3 );

    SC_METHOD(thread_p_Val2_8_fu_185_p2);
    sensitive << ( p_Val2_4_reg_70 );
    sensitive << ( tmp_s_fu_177_p3 );

    SC_METHOD(thread_p_Val2_s_7_fu_191_p2);
    sensitive << ( p_Val2_2_reg_240 );

    SC_METHOD(thread_s_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );
    sensitive << ( p_Val2_3_reg_82 );

    SC_METHOD(thread_s_V_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );

    SC_METHOD(thread_sh_assign_cast1_fu_119_p1);
    sensitive << ( sh_assign_reg_107 );

    SC_METHOD(thread_step_fu_129_p2);
    sensitive << ( sh_assign_reg_107 );

    SC_METHOD(thread_tmp_2_fu_135_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( theta_V );
    sensitive << ( exitcond_fu_123_p2 );
    sensitive << ( p_Val2_4_reg_70 );

    SC_METHOD(thread_tmp_6_fu_158_p1);
    sensitive << ( sh_assign_reg_107 );

    SC_METHOD(thread_tmp_s_fu_177_p3);
    sensitive << ( angles_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_123_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, theta_V, "(port)theta_V");
    sc_trace(mVcdFile, s_V, "(port)s_V");
    sc_trace(mVcdFile, s_V_ap_vld, "(port)s_V_ap_vld");
    sc_trace(mVcdFile, c_V, "(port)c_V");
    sc_trace(mVcdFile, c_V_ap_vld, "(port)c_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, angles_address0, "angles_address0");
    sc_trace(mVcdFile, angles_ce0, "angles_ce0");
    sc_trace(mVcdFile, angles_q0, "angles_q0");
    sc_trace(mVcdFile, step_fu_129_p2, "step_fu_129_p2");
    sc_trace(mVcdFile, step_reg_229, "step_reg_229");
    sc_trace(mVcdFile, tmp_2_fu_135_p2, "tmp_2_fu_135_p2");
    sc_trace(mVcdFile, tmp_2_reg_234, "tmp_2_reg_234");
    sc_trace(mVcdFile, exitcond_fu_123_p2, "exitcond_fu_123_p2");
    sc_trace(mVcdFile, p_Val2_2_fu_152_p2, "p_Val2_2_fu_152_p2");
    sc_trace(mVcdFile, p_Val2_2_reg_240, "p_Val2_2_reg_240");
    sc_trace(mVcdFile, X_V_2_fu_169_p3, "X_V_2_fu_169_p3");
    sc_trace(mVcdFile, X_V_2_reg_251, "X_V_2_reg_251");
    sc_trace(mVcdFile, current_V_fu_208_p3, "current_V_fu_208_p3");
    sc_trace(mVcdFile, Y_V_fu_215_p2, "Y_V_fu_215_p2");
    sc_trace(mVcdFile, p_Val2_4_reg_70, "p_Val2_4_reg_70");
    sc_trace(mVcdFile, p_Val2_3_reg_82, "p_Val2_3_reg_82");
    sc_trace(mVcdFile, p_Val2_s_reg_95, "p_Val2_s_reg_95");
    sc_trace(mVcdFile, sh_assign_reg_107, "sh_assign_reg_107");
    sc_trace(mVcdFile, tmp_6_fu_158_p1, "tmp_6_fu_158_p1");
    sc_trace(mVcdFile, sh_assign_cast1_fu_119_p1, "sh_assign_cast1_fu_119_p1");
    sc_trace(mVcdFile, p_Val2_1_fu_140_p2, "p_Val2_1_fu_140_p2");
    sc_trace(mVcdFile, T_V_fu_146_p2, "T_V_fu_146_p2");
    sc_trace(mVcdFile, T_V_1_fu_163_p2, "T_V_1_fu_163_p2");
    sc_trace(mVcdFile, tmp_s_fu_177_p3, "tmp_s_fu_177_p3");
    sc_trace(mVcdFile, p_Val2_s_7_fu_191_p2, "p_Val2_s_7_fu_191_p2");
    sc_trace(mVcdFile, p_Val2_8_fu_185_p2, "p_Val2_8_fu_185_p2");
    sc_trace(mVcdFile, p_Val2_5_fu_196_p2, "p_Val2_5_fu_196_p2");
    sc_trace(mVcdFile, p_Val2_3_pn_fu_202_p3, "p_Val2_3_pn_fu_202_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("cordic.hdltvin.dat");
    mHdltvoutHandle.open("cordic.hdltvout.dat");
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete angles_U;
}

void cordic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_3_reg_82 = Y_V_fu_215_p2.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_Val2_3_reg_82 = ap_const_lv32_0;
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_4_reg_70 = current_V_fu_208_p3.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_Val2_4_reg_70 = ap_const_lv32_0;
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        p_Val2_s_reg_95 = X_V_2_reg_251.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_Val2_s_reg_95 = ap_const_lv32_5E600000;
    }
    if (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        sh_assign_reg_107 = step_reg_229.read();
    } else if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        sh_assign_reg_107 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0))) {
        X_V_2_reg_251 = X_V_2_fu_169_p3.read();
        p_Val2_2_reg_240 = p_Val2_2_fu_152_p2.read();
        tmp_2_reg_234 = tmp_2_fu_135_p2.read();
    }
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        step_reg_229 = step_fu_129_p2.read();
    }
}

void cordic::thread_T_V_1_fu_163_p2() {
    T_V_1_fu_163_p2 = (!p_Val2_1_fu_140_p2.read().is_01() || !p_Val2_s_reg_95.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_1_fu_140_p2.read()) + sc_biguint<32>(p_Val2_s_reg_95.read()));
}

void cordic::thread_T_V_fu_146_p2() {
    T_V_fu_146_p2 = (!p_Val2_s_reg_95.read().is_01() || !p_Val2_1_fu_140_p2.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_s_reg_95.read()) - sc_biguint<32>(p_Val2_1_fu_140_p2.read()));
}

void cordic::thread_X_V_2_fu_169_p3() {
    X_V_2_fu_169_p3 = (!tmp_2_fu_135_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_135_p2.read()[0].to_bool())? T_V_fu_146_p2.read(): T_V_1_fu_163_p2.read());
}

void cordic::thread_Y_V_fu_215_p2() {
    Y_V_fu_215_p2 = (!p_Val2_3_pn_fu_202_p3.read().is_01() || !p_Val2_3_reg_82.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_3_pn_fu_202_p3.read()) + sc_biguint<32>(p_Val2_3_reg_82.read()));
}

void cordic::thread_angles_address0() {
    angles_address0 =  (sc_lv<6>) (tmp_6_fu_158_p1.read());
}

void cordic::thread_angles_ce0() {
    if (esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        angles_ce0 = ap_const_logic_1;
    } else {
        angles_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_ap_done() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_c_V() {
    c_V = p_Val2_s_reg_95.read();
}

void cordic::thread_c_V_ap_vld() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0))) {
        c_V_ap_vld = ap_const_logic_1;
    } else {
        c_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_current_V_fu_208_p3() {
    current_V_fu_208_p3 = (!tmp_2_reg_234.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_234.read()[0].to_bool())? p_Val2_8_fu_185_p2.read(): p_Val2_5_fu_196_p2.read());
}

void cordic::thread_exitcond_fu_123_p2() {
    exitcond_fu_123_p2 = (!sh_assign_reg_107.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(sh_assign_reg_107.read() == ap_const_lv5_1E);
}

void cordic::thread_p_Val2_1_fu_140_p2() {
    p_Val2_1_fu_140_p2 = (!p_Val2_3_reg_82.read().is_01() || !sh_assign_cast1_fu_119_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(p_Val2_3_reg_82.read()) >> (unsigned short)sh_assign_cast1_fu_119_p1.read().to_uint();
}

void cordic::thread_p_Val2_2_fu_152_p2() {
    p_Val2_2_fu_152_p2 = (!p_Val2_s_reg_95.read().is_01() || !sh_assign_cast1_fu_119_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(p_Val2_s_reg_95.read()) >> (unsigned short)sh_assign_cast1_fu_119_p1.read().to_uint();
}

void cordic::thread_p_Val2_3_pn_fu_202_p3() {
    p_Val2_3_pn_fu_202_p3 = (!tmp_2_reg_234.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_234.read()[0].to_bool())? p_Val2_2_reg_240.read(): p_Val2_s_7_fu_191_p2.read());
}

void cordic::thread_p_Val2_5_fu_196_p2() {
    p_Val2_5_fu_196_p2 = (!p_Val2_4_reg_70.read().is_01() || !tmp_s_fu_177_p3.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_4_reg_70.read()) - sc_biguint<32>(tmp_s_fu_177_p3.read()));
}

void cordic::thread_p_Val2_8_fu_185_p2() {
    p_Val2_8_fu_185_p2 = (!tmp_s_fu_177_p3.read().is_01() || !p_Val2_4_reg_70.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_s_fu_177_p3.read()) + sc_biguint<32>(p_Val2_4_reg_70.read()));
}

void cordic::thread_p_Val2_s_7_fu_191_p2() {
    p_Val2_s_7_fu_191_p2 = (!ap_const_lv32_0.is_01() || !p_Val2_2_reg_240.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_0) - sc_biguint<32>(p_Val2_2_reg_240.read()));
}

void cordic::thread_s_V() {
    s_V = p_Val2_3_reg_82.read();
}

void cordic::thread_s_V_ap_vld() {
    if ((esl_seteq<1,2,2>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0))) {
        s_V_ap_vld = ap_const_logic_1;
    } else {
        s_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_sh_assign_cast1_fu_119_p1() {
    sh_assign_cast1_fu_119_p1 = esl_zext<32,5>(sh_assign_reg_107.read());
}

void cordic::thread_step_fu_129_p2() {
    step_fu_129_p2 = (!sh_assign_reg_107.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_bigint<5>(sh_assign_reg_107.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void cordic::thread_tmp_2_fu_135_p2() {
    tmp_2_fu_135_p2 = (!p_Val2_4_reg_70.read().is_01() || !theta_V.read().is_01())? sc_lv<1>(): (sc_bigint<32>(p_Val2_4_reg_70.read()) < sc_bigint<32>(theta_V.read()));
}

void cordic::thread_tmp_6_fu_158_p1() {
    tmp_6_fu_158_p1 = esl_zext<64,5>(sh_assign_reg_107.read());
}

void cordic::thread_tmp_s_fu_177_p3() {
    tmp_s_fu_177_p3 = esl_concat<12,20>(angles_q0.read(), ap_const_lv20_0);
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_123_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void cordic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"theta_V\" :  \"" << theta_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_V\" :  \"" << s_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_V_ap_vld\" :  \"" << s_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V\" :  \"" << c_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_ap_vld\" :  \"" << c_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

