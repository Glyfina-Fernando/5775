// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __cordic_angles_H__
#define __cordic_angles_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct cordic_angles_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 64;
  static const unsigned AddressRange = 20;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(cordic_angles_ram) {
        ram[0] = "0b0011111111101001001000011111101101010100000011011000110100100000";
        ram[1] = "0b0011111111011101101011000110011100000100010011101010000111010111";
        ram[2] = "0b0011111111001111010110110111010111111000111001101100001001010011";
        ram[3] = "0b0011111110111111110101011011101010001111101110111111110111010000";
        ram[4] = "0b0011111110101111111101010101101110011101011100001100111111011101";
        ram[5] = "0b0011111110011111111111010101010110000000101110101111101101101001";
        ram[6] = "0b0011111110001111111111110101010100000001101100010111110101011101";
        ram[7] = "0b0011111101111111111111111101010100001100111000100011101110011111";
        ram[8] = "0b0011111101101111111111111111010000110000010101111101000001100101";
        ram[9] = "0b0011111101011111111111111111101110110100011111010000010111110110";
        ram[10] = "0b0011111101001111111111111111100001111011110110101100101001101111";
        ram[11] = "0b0011111100111111111111111111001000001010100101100101001101100000";
        ram[12] = "0b0011111100101111111111111110000011011100100010100110101100111010";
        ram[13] = "0b0011111100011111111111111100011100010111011110001000111011111111";
        ram[14] = "0b0011111100001111111111110111000100110001001111010000011000111101";
        ram[15] = "0b0011111011111111111111110000101000011100111101011001010101010100";
        ram[16] = "0b0011111011101111111111011111011100111100001101110001001011100111";
        ram[17] = "0b0011111011011111111111000101101011101011000110010100111101000011";
        ram[18] = "0b0011111011010000000000000101001100110111000010011010110001111100";
        ram[19] = "0b0011111010111111111100011001111000100011101010000011011011111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(cordic_angles) {


static const unsigned DataWidth = 64;
static const unsigned AddressRange = 20;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


cordic_angles_ram* meminst;


SC_CTOR(cordic_angles) {
meminst = new cordic_angles_ram("cordic_angles_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~cordic_angles() {
    delete meminst;
}


};//endmodule
#endif
