

================================================================
== Vivado HLS Report for 'cordic'
================================================================
* Date:           Fri Sep  4 23:44:20 2015

* Version:        2014.2 (Build 932637 on Wed Jun 11 12:38:34 PM 2014)
* Project:        float_iter_100.prj
* Solution:       solution1
* Product family: zynq zynq_fpv6 
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.62|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  1442|  1442|  1443|  1443|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1  |  1440|  1440|        72|          -|          -|    20|    no    |
        +----------+------+------+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 109
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond)
	109  / (exitcond)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / (!tmp)
	74  / (tmp)
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	2  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	2  / true
109 --> 
* FSM state operations: 

 <State 1>: 1.68ns
ST_1: current [1/1] 0.00ns
:0  %current = alloca double, align 8

ST_1: X [1/1] 0.00ns
:1  %X = alloca double, align 8

ST_1: Y [1/1] 0.00ns
:2  %Y = alloca double, align 8

ST_1: stg_113 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(double %theta) nounwind, !map !7

ST_1: stg_114 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(double* %s) nounwind, !map !13

ST_1: stg_115 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(double* %c) nounwind, !map !17

ST_1: stg_116 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @str) nounwind

ST_1: theta_read [1/1] 0.00ns
:7  %theta_read = call double @_ssdm_op_Read.ap_auto.double(double %theta) nounwind

ST_1: stg_118 [1/1] 1.68ns
:8  br label %.backedge


 <State 2>: 7.46ns
ST_2: storemerge [1/1] 0.00ns
.backedge:0  %storemerge = phi double [ 0.000000e+00, %0 ], [ %Y_1, %2 ], [ %Y_2, %3 ]

ST_2: storemerge1 [1/1] 0.00ns
.backedge:1  %storemerge1 = phi double [ 0x3FE36E9DB5155ED2, %0 ], [ %T, %2 ], [ %T_1, %3 ]

ST_2: storemerge2 [1/1] 0.00ns
.backedge:2  %storemerge2 = phi double [ 0.000000e+00, %0 ], [ %current_1, %2 ], [ %current_2, %3 ]

ST_2: step [1/1] 0.00ns
.backedge:3  %step = phi i5 [ 0, %0 ], [ %step_1, %3 ], [ %step_1, %2 ]

ST_2: stg_123 [1/1] 0.00ns
.backedge:4  store double %storemerge, double* %Y, align 8

ST_2: stg_124 [1/1] 0.00ns
.backedge:5  store double %storemerge1, double* %X, align 8

ST_2: stg_125 [1/1] 0.00ns
.backedge:6  store double %storemerge2, double* %current, align 8

ST_2: exitcond [1/1] 1.91ns
.backedge:7  %exitcond = icmp eq i5 %step, -12

ST_2: empty [1/1] 0.00ns
.backedge:8  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20) nounwind

ST_2: step_1 [1/1] 1.72ns
.backedge:9  %step_1 = add i5 %step, 1

ST_2: stg_129 [1/1] 0.00ns
.backedge:10  br i1 %exitcond, label %4, label %1

ST_2: tmp_1_cast [1/1] 0.00ns
:4  %tmp_1_cast = zext i5 %step to i20

ST_2: tmp_2 [1/1] 1.18ns
:5  %tmp_2 = shl i20 1, %tmp_1_cast

ST_2: tmp_s [1/1] 0.00ns
:6  %tmp_s = zext i20 %tmp_2 to i32

ST_2: tmp_3 [6/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 3>: 6.28ns
ST_3: tmp_3 [5/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 4>: 6.28ns
ST_4: tmp_3 [4/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 5>: 6.28ns
ST_5: tmp_3 [3/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 6>: 6.28ns
ST_6: tmp_3 [2/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 7>: 6.28ns
ST_7: tmp_3 [1/6] 6.28ns
:7  %tmp_3 = uitofp i32 %tmp_s to double


 <State 8>: 8.62ns
ST_8: Y_load_1 [1/1] 0.00ns
:1  %Y_load_1 = load double* %Y, align 8

ST_8: tmp_4 [31/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 9>: 8.62ns
ST_9: tmp_4 [30/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 10>: 8.62ns
ST_10: tmp_4 [29/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 11>: 8.62ns
ST_11: tmp_4 [28/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 12>: 8.62ns
ST_12: tmp_4 [27/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 13>: 8.62ns
ST_13: tmp_4 [26/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 14>: 8.62ns
ST_14: tmp_4 [25/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 15>: 8.62ns
ST_15: tmp_4 [24/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 16>: 8.62ns
ST_16: tmp_4 [23/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 17>: 8.62ns
ST_17: tmp_4 [22/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 18>: 8.62ns
ST_18: tmp_4 [21/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 19>: 8.62ns
ST_19: tmp_4 [20/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 20>: 8.62ns
ST_20: tmp_4 [19/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 21>: 8.62ns
ST_21: tmp_4 [18/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 22>: 8.62ns
ST_22: tmp_4 [17/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 23>: 8.62ns
ST_23: tmp_4 [16/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 24>: 8.62ns
ST_24: tmp_4 [15/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 25>: 8.62ns
ST_25: tmp_4 [14/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 26>: 8.62ns
ST_26: tmp_4 [13/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 27>: 8.62ns
ST_27: tmp_4 [12/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 28>: 8.62ns
ST_28: tmp_4 [11/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 29>: 8.62ns
ST_29: tmp_4 [10/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 30>: 8.62ns
ST_30: tmp_4 [9/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 31>: 8.62ns
ST_31: tmp_4 [8/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 32>: 8.62ns
ST_32: tmp_4 [7/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 33>: 8.62ns
ST_33: tmp_4 [6/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 34>: 8.62ns
ST_34: tmp_4 [5/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 35>: 8.62ns
ST_35: tmp_4 [4/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 36>: 8.62ns
ST_36: current_load [1/1] 0.00ns
:0  %current_load = load double* %current, align 8

ST_36: tmp [3/3] 4.55ns
:2  %tmp = fcmp olt double %current_load, %theta_read

ST_36: tmp_4 [3/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 37>: 8.62ns
ST_37: tmp [2/3] 4.55ns
:2  %tmp = fcmp olt double %current_load, %theta_read

ST_37: tmp_4 [2/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3


 <State 38>: 8.62ns
ST_38: tmp [1/3] 4.55ns
:2  %tmp = fcmp olt double %current_load, %theta_read

ST_38: tmp_1 [1/1] 0.00ns
:3  %tmp_1 = zext i5 %step to i64

ST_38: tmp_4 [1/31] 8.62ns
:8  %tmp_4 = fdiv double %Y_load_1, %tmp_3

ST_38: X_load_1 [1/1] 0.00ns
:9  %X_load_1 = load double* %X, align 8

ST_38: stg_177 [1/1] 0.00ns
:10  br i1 %tmp, label %2, label %3

ST_38: tmp_8 [31/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_38: angles_addr_1 [1/1] 0.00ns
:3  %angles_addr_1 = getelementptr inbounds [20 x double]* @angles, i64 0, i64 %tmp_1

ST_38: angles_load_1 [2/2] 2.39ns
:4  %angles_load_1 = load double* %angles_addr_1, align 8

ST_38: tmp_6 [31/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_38: angles_addr [1/1] 0.00ns
:3  %angles_addr = getelementptr inbounds [20 x double]* @angles, i64 0, i64 %tmp_1

ST_38: angles_load [2/2] 2.39ns
:4  %angles_load = load double* %angles_addr, align 8


 <State 39>: 8.62ns
ST_39: T_1 [5/5] 8.23ns
:0  %T_1 = fadd double %X_load_1, %tmp_4

ST_39: tmp_8 [30/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_39: angles_load_1 [1/2] 2.39ns
:4  %angles_load_1 = load double* %angles_addr_1, align 8


 <State 40>: 8.62ns
ST_40: T_1 [4/5] 8.23ns
:0  %T_1 = fadd double %X_load_1, %tmp_4

ST_40: tmp_8 [29/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_40: current_2 [5/5] 8.23ns
:5  %current_2 = fsub double %current_load, %angles_load_1


 <State 41>: 8.62ns
ST_41: T_1 [3/5] 8.23ns
:0  %T_1 = fadd double %X_load_1, %tmp_4

ST_41: tmp_8 [28/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_41: current_2 [4/5] 8.23ns
:5  %current_2 = fsub double %current_load, %angles_load_1


 <State 42>: 8.62ns
ST_42: T_1 [2/5] 8.23ns
:0  %T_1 = fadd double %X_load_1, %tmp_4

ST_42: tmp_8 [27/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_42: current_2 [3/5] 8.23ns
:5  %current_2 = fsub double %current_load, %angles_load_1


 <State 43>: 8.62ns
ST_43: T_1 [1/5] 8.23ns
:0  %T_1 = fadd double %X_load_1, %tmp_4

ST_43: tmp_8 [26/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_43: current_2 [2/5] 8.23ns
:5  %current_2 = fsub double %current_load, %angles_load_1


 <State 44>: 8.62ns
ST_44: tmp_8 [25/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3

ST_44: current_2 [1/5] 8.23ns
:5  %current_2 = fsub double %current_load, %angles_load_1


 <State 45>: 8.62ns
ST_45: tmp_8 [24/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 46>: 8.62ns
ST_46: tmp_8 [23/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 47>: 8.62ns
ST_47: tmp_8 [22/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 48>: 8.62ns
ST_48: tmp_8 [21/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 49>: 8.62ns
ST_49: tmp_8 [20/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 50>: 8.62ns
ST_50: tmp_8 [19/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 51>: 8.62ns
ST_51: tmp_8 [18/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 52>: 8.62ns
ST_52: tmp_8 [17/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 53>: 8.62ns
ST_53: tmp_8 [16/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 54>: 8.62ns
ST_54: tmp_8 [15/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 55>: 8.62ns
ST_55: tmp_8 [14/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 56>: 8.62ns
ST_56: tmp_8 [13/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 57>: 8.62ns
ST_57: tmp_8 [12/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 58>: 8.62ns
ST_58: tmp_8 [11/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 59>: 8.62ns
ST_59: tmp_8 [10/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 60>: 8.62ns
ST_60: tmp_8 [9/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 61>: 8.62ns
ST_61: tmp_8 [8/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 62>: 8.62ns
ST_62: tmp_8 [7/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 63>: 8.62ns
ST_63: tmp_8 [6/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 64>: 8.62ns
ST_64: tmp_8 [5/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 65>: 8.62ns
ST_65: tmp_8 [4/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 66>: 8.62ns
ST_66: tmp_8 [3/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 67>: 8.62ns
ST_67: tmp_8 [2/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 68>: 8.62ns
ST_68: tmp_8 [1/31] 8.62ns
:1  %tmp_8 = fdiv double %X_load_1, %tmp_3


 <State 69>: 8.23ns
ST_69: Y_2 [5/5] 8.23ns
:2  %Y_2 = fsub double %Y_load_1, %tmp_8


 <State 70>: 8.23ns
ST_70: Y_2 [4/5] 8.23ns
:2  %Y_2 = fsub double %Y_load_1, %tmp_8


 <State 71>: 8.23ns
ST_71: Y_2 [3/5] 8.23ns
:2  %Y_2 = fsub double %Y_load_1, %tmp_8


 <State 72>: 8.23ns
ST_72: Y_2 [2/5] 8.23ns
:2  %Y_2 = fsub double %Y_load_1, %tmp_8


 <State 73>: 8.23ns
ST_73: Y_2 [1/5] 8.23ns
:2  %Y_2 = fsub double %Y_load_1, %tmp_8

ST_73: stg_230 [1/1] 0.00ns
:6  br label %.backedge


 <State 74>: 8.62ns
ST_74: T [5/5] 8.23ns
:0  %T = fsub double %X_load_1, %tmp_4

ST_74: tmp_6 [30/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_74: angles_load [1/2] 2.39ns
:4  %angles_load = load double* %angles_addr, align 8


 <State 75>: 8.62ns
ST_75: T [4/5] 8.23ns
:0  %T = fsub double %X_load_1, %tmp_4

ST_75: tmp_6 [29/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_75: current_1 [5/5] 8.23ns
:5  %current_1 = fadd double %current_load, %angles_load


 <State 76>: 8.62ns
ST_76: T [3/5] 8.23ns
:0  %T = fsub double %X_load_1, %tmp_4

ST_76: tmp_6 [28/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_76: current_1 [4/5] 8.23ns
:5  %current_1 = fadd double %current_load, %angles_load


 <State 77>: 8.62ns
ST_77: T [2/5] 8.23ns
:0  %T = fsub double %X_load_1, %tmp_4

ST_77: tmp_6 [27/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_77: current_1 [3/5] 8.23ns
:5  %current_1 = fadd double %current_load, %angles_load


 <State 78>: 8.62ns
ST_78: T [1/5] 8.23ns
:0  %T = fsub double %X_load_1, %tmp_4

ST_78: tmp_6 [26/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_78: current_1 [2/5] 8.23ns
:5  %current_1 = fadd double %current_load, %angles_load


 <State 79>: 8.62ns
ST_79: tmp_6 [25/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3

ST_79: current_1 [1/5] 8.23ns
:5  %current_1 = fadd double %current_load, %angles_load


 <State 80>: 8.62ns
ST_80: tmp_6 [24/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 81>: 8.62ns
ST_81: tmp_6 [23/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 82>: 8.62ns
ST_82: tmp_6 [22/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 83>: 8.62ns
ST_83: tmp_6 [21/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 84>: 8.62ns
ST_84: tmp_6 [20/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 85>: 8.62ns
ST_85: tmp_6 [19/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 86>: 8.62ns
ST_86: tmp_6 [18/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 87>: 8.62ns
ST_87: tmp_6 [17/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 88>: 8.62ns
ST_88: tmp_6 [16/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 89>: 8.62ns
ST_89: tmp_6 [15/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 90>: 8.62ns
ST_90: tmp_6 [14/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 91>: 8.62ns
ST_91: tmp_6 [13/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 92>: 8.62ns
ST_92: tmp_6 [12/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 93>: 8.62ns
ST_93: tmp_6 [11/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 94>: 8.62ns
ST_94: tmp_6 [10/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 95>: 8.62ns
ST_95: tmp_6 [9/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 96>: 8.62ns
ST_96: tmp_6 [8/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 97>: 8.62ns
ST_97: tmp_6 [7/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 98>: 8.62ns
ST_98: tmp_6 [6/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 99>: 8.62ns
ST_99: tmp_6 [5/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 100>: 8.62ns
ST_100: tmp_6 [4/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 101>: 8.62ns
ST_101: tmp_6 [3/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 102>: 8.62ns
ST_102: tmp_6 [2/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 103>: 8.62ns
ST_103: tmp_6 [1/31] 8.62ns
:1  %tmp_6 = fdiv double %X_load_1, %tmp_3


 <State 104>: 8.23ns
ST_104: Y_1 [5/5] 8.23ns
:2  %Y_1 = fadd double %tmp_6, %Y_load_1


 <State 105>: 8.23ns
ST_105: Y_1 [4/5] 8.23ns
:2  %Y_1 = fadd double %tmp_6, %Y_load_1


 <State 106>: 8.23ns
ST_106: Y_1 [3/5] 8.23ns
:2  %Y_1 = fadd double %tmp_6, %Y_load_1


 <State 107>: 8.23ns
ST_107: Y_1 [2/5] 8.23ns
:2  %Y_1 = fadd double %tmp_6, %Y_load_1


 <State 108>: 8.23ns
ST_108: Y_1 [1/5] 8.23ns
:2  %Y_1 = fadd double %tmp_6, %Y_load_1

ST_108: stg_277 [1/1] 0.00ns
:6  br label %.backedge


 <State 109>: 0.00ns
ST_109: X_load [1/1] 0.00ns
:0  %X_load = load double* %X, align 8

ST_109: Y_load [1/1] 0.00ns
:1  %Y_load = load double* %Y, align 8

ST_109: stg_280 [1/1] 0.00ns
:2  call void @_ssdm_op_Write.ap_auto.doubleP(double* %c, double %X_load) nounwind

ST_109: stg_281 [1/1] 0.00ns
:3  call void @_ssdm_op_Write.ap_auto.doubleP(double* %s, double %Y_load) nounwind

ST_109: stg_282 [1/1] 0.00ns
:4  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
