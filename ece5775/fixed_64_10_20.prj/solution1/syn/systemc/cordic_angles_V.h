// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __cordic_angles_V_H__
#define __cordic_angles_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct cordic_angles_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 54;
  static const unsigned AddressRange = 20;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(cordic_angles_V_ram) {
        ram[0] = "0b110010010000111111011010101000000110110001101001000000";
        ram[1] = "0b011101101011000110011100000100010011101010000111010111";
        ram[2] = "0b001111101011011011101011111100011100110110000100101001";
        ram[3] = "0b000111111101010110111010100011111011101111111101110100";
        ram[4] = "0b000011111111101010101101110011101011100001100111111011";
        ram[5] = "0b000001111111111101010101011000000010111010111110110110";
        ram[6] = "0b000000111111111111101010101000000011011000101111101010";
        ram[7] = "0b000000011111111111111101010100001100111000100011101110";
        ram[8] = "0b000000001111111111111111101000011000001010111110100000";
        ram[9] = "0b000000000111111111111111111011101101000111110100000101";
        ram[10] = "0b000000000011111111111111111100001111011110110101100101";
        ram[11] = "0b000000000001111111111111111100100000101010010110010100";
        ram[12] = "0b000000000000111111111111111100000110111001000101001101";
        ram[13] = "0b000000000000011111111111111100011100010111011110001000";
        ram[14] = "0b000000000000001111111111111011100010011000100111101000";
        ram[15] = "0b000000000000000111111111111100001010000111001111010110";
        ram[16] = "0b000000000000000011111111111011111011100111100001101110";
        ram[17] = "0b000000000000000001111111111100010110101110101100011001";
        ram[18] = "0b000000000000000001000000000000010100110011011100001001";
        ram[19] = "0b000000000000000000011111111100011001111000100011101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(cordic_angles_V) {


static const unsigned DataWidth = 54;
static const unsigned AddressRange = 20;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


cordic_angles_V_ram* meminst;


SC_CTOR(cordic_angles_V) {
meminst = new cordic_angles_V_ram("cordic_angles_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~cordic_angles_V() {
    delete meminst;
}


};//endmodule
#endif
