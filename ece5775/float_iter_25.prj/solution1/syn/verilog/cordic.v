// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.593000,HLS_SYN_LAT=1052,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        theta,
        s,
        s_ap_vld,
        c,
        c_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b1;
parameter    ap_ST_st3_fsm_2 = 6'b10;
parameter    ap_ST_st4_fsm_3 = 6'b11;
parameter    ap_ST_st5_fsm_4 = 6'b100;
parameter    ap_ST_st6_fsm_5 = 6'b101;
parameter    ap_ST_st7_fsm_6 = 6'b110;
parameter    ap_ST_st8_fsm_7 = 6'b111;
parameter    ap_ST_st9_fsm_8 = 6'b1000;
parameter    ap_ST_st10_fsm_9 = 6'b1001;
parameter    ap_ST_st11_fsm_10 = 6'b1010;
parameter    ap_ST_st12_fsm_11 = 6'b1011;
parameter    ap_ST_st13_fsm_12 = 6'b1100;
parameter    ap_ST_st14_fsm_13 = 6'b1101;
parameter    ap_ST_st15_fsm_14 = 6'b1110;
parameter    ap_ST_st16_fsm_15 = 6'b1111;
parameter    ap_ST_st17_fsm_16 = 6'b10000;
parameter    ap_ST_st18_fsm_17 = 6'b10001;
parameter    ap_ST_st19_fsm_18 = 6'b10010;
parameter    ap_ST_st20_fsm_19 = 6'b10011;
parameter    ap_ST_st21_fsm_20 = 6'b10100;
parameter    ap_ST_st22_fsm_21 = 6'b10101;
parameter    ap_ST_st23_fsm_22 = 6'b10110;
parameter    ap_ST_st24_fsm_23 = 6'b10111;
parameter    ap_ST_st25_fsm_24 = 6'b11000;
parameter    ap_ST_st26_fsm_25 = 6'b11001;
parameter    ap_ST_st27_fsm_26 = 6'b11010;
parameter    ap_ST_st28_fsm_27 = 6'b11011;
parameter    ap_ST_st29_fsm_28 = 6'b11100;
parameter    ap_ST_st30_fsm_29 = 6'b11101;
parameter    ap_ST_st31_fsm_30 = 6'b11110;
parameter    ap_ST_st32_fsm_31 = 6'b11111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_ST_st36_fsm_35 = 6'b100011;
parameter    ap_ST_st37_fsm_36 = 6'b100100;
parameter    ap_ST_st38_fsm_37 = 6'b100101;
parameter    ap_ST_st39_fsm_38 = 6'b100110;
parameter    ap_ST_st40_fsm_39 = 6'b100111;
parameter    ap_ST_st41_fsm_40 = 6'b101000;
parameter    ap_ST_st42_fsm_41 = 6'b101001;
parameter    ap_ST_st43_fsm_42 = 6'b101010;
parameter    ap_ST_st44_fsm_43 = 6'b101011;
parameter    ap_ST_st45_fsm_44 = 6'b101100;
parameter    ap_ST_st46_fsm_45 = 6'b101101;
parameter    ap_ST_st47_fsm_46 = 6'b101110;
parameter    ap_ST_st48_fsm_47 = 6'b101111;
parameter    ap_ST_st49_fsm_48 = 6'b110000;
parameter    ap_ST_st50_fsm_49 = 6'b110001;
parameter    ap_ST_st51_fsm_50 = 6'b110010;
parameter    ap_ST_st52_fsm_51 = 6'b110011;
parameter    ap_ST_st53_fsm_52 = 6'b110100;
parameter    ap_ST_st54_fsm_53 = 6'b110101;
parameter    ap_ST_st55_fsm_54 = 6'b110110;
parameter    ap_ST_st56_fsm_55 = 6'b110111;
parameter    ap_ST_st57_fsm_56 = 6'b111000;
parameter    ap_ST_st58_fsm_57 = 6'b111001;
parameter    ap_ST_st59_fsm_58 = 6'b111010;
parameter    ap_ST_st60_fsm_59 = 6'b111011;
parameter    ap_ST_st61_fsm_60 = 6'b111100;
parameter    ap_ST_st62_fsm_61 = 6'b111101;
parameter    ap_ST_st63_fsm_62 = 6'b111110;
parameter    ap_ST_st64_fsm_63 = 6'b111111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_3F1B74EE = 32'b111111000110110111010011101110;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_19 = 5'b11001;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv25_1 = 25'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] theta;
output  [31:0] s;
output   s_ap_vld;
output  [31:0] c;
output   c_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_ap_vld;
reg c_ap_vld;
reg   [5:0] ap_CS_fsm = 6'b000000;
reg   [5:0] cordic_ctab_address0;
reg    cordic_ctab_ce0;
wire   [31:0] cordic_ctab_q0;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] reg_169;
reg   [31:0] reg_175;
wire   [4:0] step_1_fu_201_p2;
reg   [4:0] step_1_reg_258;
wire   [0:0] exitcond_fu_195_p2;
wire   [31:0] grp_fu_152_p1;
reg   [31:0] tmp_3_reg_269;
reg   [31:0] Y_load_1_reg_274;
reg   [31:0] current_load_reg_281;
reg   [31:0] X_load_1_reg_290;
wire   [0:0] grp_fu_155_p2;
wire   [5:0] cordic_ctab_addr_gep_fu_82_p3;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] T_1_reg_306;
reg   [31:0] current_2_reg_311;
reg   [31:0] T_reg_321;
reg   [31:0] current_1_reg_326;
reg   [31:0] storemerge_reg_90;
reg   [31:0] storemerge1_reg_103;
reg   [31:0] storemerge2_reg_116;
reg   [4:0] step_reg_129;
wire   [63:0] tmp_1_fu_226_p1;
reg   [31:0] current_fu_38;
reg   [31:0] X_fu_42;
reg   [31:0] Y_fu_46;
reg   [31:0] grp_fu_144_p0;
reg   [31:0] grp_fu_144_p1;
reg   [31:0] grp_fu_148_p0;
wire   [31:0] grp_fu_148_p1;
wire   [31:0] grp_fu_152_p0;
wire   [31:0] grp_fu_155_p0;
wire   [31:0] grp_fu_155_p1;
wire   [24:0] tmp_1_cast_fu_207_p1;
wire   [24:0] tmp_2_fu_211_p2;
reg   [1:0] grp_fu_144_opcode;
wire    grp_fu_144_ce;
wire    grp_fu_148_ce;
wire    grp_fu_152_ce;
wire    grp_fu_155_ce;
wire   [4:0] grp_fu_155_opcode;
reg   [5:0] ap_NS_fsm;


cordic_cordic_ctab #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_ctab_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( cordic_ctab_address0 ),
    .ce0( cordic_ctab_ce0 ),
    .q0( cordic_ctab_q0 )
);

cordic_faddfsub_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_faddfsub_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_144_p0 ),
    .din1( grp_fu_144_p1 ),
    .opcode( grp_fu_144_opcode ),
    .ce( grp_fu_144_ce ),
    .dout( grp_fu_144_p2 )
);

cordic_fdiv_32ns_32ns_32_16 #(
    .ID( 2 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_fdiv_32ns_32ns_32_16_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_148_p0 ),
    .din1( grp_fu_148_p1 ),
    .ce( grp_fu_148_ce ),
    .dout( grp_fu_148_p2 )
);

cordic_uitofp_32ns_32_6 #(
    .ID( 3 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cordic_uitofp_32ns_32_6_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_152_p0 ),
    .ce( grp_fu_152_ce ),
    .dout( grp_fu_152_p1 )
);

cordic_fcmp_32ns_32ns_1_3 #(
    .ID( 4 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cordic_fcmp_32ns_32ns_1_3_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_155_p0 ),
    .din1( grp_fu_155_p1 ),
    .ce( grp_fu_155_ce ),
    .opcode( grp_fu_155_opcode ),
    .dout( grp_fu_155_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st43_fsm_42 == ap_CS_fsm) | (ap_ST_st63_fsm_62 == ap_CS_fsm))) begin
        step_reg_129 <= step_1_reg_258;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        step_reg_129 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st43_fsm_42 == ap_CS_fsm)) begin
        storemerge1_reg_103 <= T_1_reg_306;
    end else if ((ap_ST_st63_fsm_62 == ap_CS_fsm)) begin
        storemerge1_reg_103 <= T_reg_321;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        storemerge1_reg_103 <= ap_const_lv32_3F1B74EE;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st43_fsm_42 == ap_CS_fsm)) begin
        storemerge2_reg_116 <= current_2_reg_311;
    end else if ((ap_ST_st63_fsm_62 == ap_CS_fsm)) begin
        storemerge2_reg_116 <= current_1_reg_326;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        storemerge2_reg_116 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st43_fsm_42 == ap_CS_fsm) | (ap_ST_st63_fsm_62 == ap_CS_fsm))) begin
        storemerge_reg_90 <= grp_fu_144_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        storemerge_reg_90 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st28_fsm_27 == ap_CS_fsm)) begin
        T_1_reg_306 <= grp_fu_144_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st48_fsm_47 == ap_CS_fsm)) begin
        T_reg_321 <= grp_fu_144_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        X_fu_42 <= storemerge1_reg_103;
        Y_fu_46 <= storemerge_reg_90;
        current_fu_38 <= storemerge2_reg_116;
        step_1_reg_258 <= step_1_fu_201_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        X_load_1_reg_290 <= X_fu_42;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        Y_load_1_reg_274 <= Y_fu_46;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st49_fsm_48 == ap_CS_fsm)) begin
        current_1_reg_326 <= grp_fu_144_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st29_fsm_28 == ap_CS_fsm)) begin
        current_2_reg_311 <= grp_fu_144_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st21_fsm_20 == ap_CS_fsm)) begin
        current_load_reg_281 <= current_fu_38;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st23_fsm_22 == ap_CS_fsm) | (ap_ST_st38_fsm_37 == ap_CS_fsm) | (ap_ST_st58_fsm_57 == ap_CS_fsm))) begin
        reg_169 <= grp_fu_148_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st24_fsm_23 == ap_CS_fsm) | (ap_ST_st44_fsm_43 == ap_CS_fsm))) begin
        reg_175 <= cordic_ctab_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        tmp_3_reg_269 <= grp_fu_152_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st64_fsm_63 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st64_fsm_63 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// c_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st64_fsm_63 == ap_CS_fsm)) begin
        c_ap_vld = ap_const_logic_1;
    end else begin
        c_ap_vld = ap_const_logic_0;
    end
end

/// cordic_ctab_address0 assign process. ///
always @ (ap_CS_fsm or grp_fu_155_p2 or cordic_ctab_addr_gep_fu_82_p3 or tmp_1_fu_226_p1)
begin
    if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        if (~(ap_const_lv1_0 == grp_fu_155_p2)) begin
            cordic_ctab_address0 = cordic_ctab_addr_gep_fu_82_p3;
        end else if ((ap_const_lv1_0 == grp_fu_155_p2)) begin
            cordic_ctab_address0 = tmp_1_fu_226_p1;
        end else begin
            cordic_ctab_address0 = 'bx;
        end
    end else begin
        cordic_ctab_address0 = 'bx;
    end
end

/// cordic_ctab_ce0 assign process. ///
always @ (ap_CS_fsm or grp_fu_155_p2)
begin
    if ((((ap_ST_st23_fsm_22 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_155_p2)) | ((ap_ST_st23_fsm_22 == ap_CS_fsm) & ~(ap_const_lv1_0 == grp_fu_155_p2)))) begin
        cordic_ctab_ce0 = ap_const_logic_1;
    end else begin
        cordic_ctab_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_144_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st44_fsm_43 == ap_CS_fsm) | (ap_ST_st25_fsm_24 == ap_CS_fsm) | (ap_ST_st39_fsm_38 == ap_CS_fsm))) begin
        grp_fu_144_opcode = ap_const_lv2_1;
    end else if (((ap_ST_st24_fsm_23 == ap_CS_fsm) | (ap_ST_st45_fsm_44 == ap_CS_fsm) | (ap_ST_st59_fsm_58 == ap_CS_fsm))) begin
        grp_fu_144_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_144_opcode = 'bx;
    end
end

/// grp_fu_144_p0 assign process. ///
always @ (ap_CS_fsm or reg_169 or Y_load_1_reg_274 or current_load_reg_281 or X_load_1_reg_290)
begin
    if ((ap_ST_st59_fsm_58 == ap_CS_fsm)) begin
        grp_fu_144_p0 = reg_169;
    end else if ((ap_ST_st39_fsm_38 == ap_CS_fsm)) begin
        grp_fu_144_p0 = Y_load_1_reg_274;
    end else if (((ap_ST_st25_fsm_24 == ap_CS_fsm) | (ap_ST_st45_fsm_44 == ap_CS_fsm))) begin
        grp_fu_144_p0 = current_load_reg_281;
    end else if (((ap_ST_st24_fsm_23 == ap_CS_fsm) | (ap_ST_st44_fsm_43 == ap_CS_fsm))) begin
        grp_fu_144_p0 = X_load_1_reg_290;
    end else begin
        grp_fu_144_p0 = 'bx;
    end
end

/// grp_fu_144_p1 assign process. ///
always @ (ap_CS_fsm or reg_169 or reg_175 or Y_load_1_reg_274)
begin
    if ((ap_ST_st59_fsm_58 == ap_CS_fsm)) begin
        grp_fu_144_p1 = Y_load_1_reg_274;
    end else if (((ap_ST_st25_fsm_24 == ap_CS_fsm) | (ap_ST_st45_fsm_44 == ap_CS_fsm))) begin
        grp_fu_144_p1 = reg_175;
    end else if (((ap_ST_st24_fsm_23 == ap_CS_fsm) | (ap_ST_st44_fsm_43 == ap_CS_fsm) | (ap_ST_st39_fsm_38 == ap_CS_fsm))) begin
        grp_fu_144_p1 = reg_169;
    end else begin
        grp_fu_144_p1 = 'bx;
    end
end

/// grp_fu_148_p0 assign process. ///
always @ (ap_CS_fsm or grp_fu_155_p2 or X_fu_42 or Y_fu_46)
begin
    if ((((ap_ST_st23_fsm_22 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_155_p2)) | ((ap_ST_st23_fsm_22 == ap_CS_fsm) & ~(ap_const_lv1_0 == grp_fu_155_p2)))) begin
        grp_fu_148_p0 = X_fu_42;
    end else if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        grp_fu_148_p0 = Y_fu_46;
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

/// s_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st64_fsm_63 == ap_CS_fsm)) begin
        s_ap_vld = ap_const_logic_1;
    end else begin
        s_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_195_p2 or grp_fu_155_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_195_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st64_fsm_63;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            if (~(ap_const_lv1_0 == grp_fu_155_p2)) begin
                ap_NS_fsm = ap_ST_st44_fsm_43;
            end else begin
                ap_NS_fsm = ap_ST_st24_fsm_23;
            end
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign c = X_fu_42;
assign cordic_ctab_addr_gep_fu_82_p3 = tmp_1_fu_226_p1;
assign exitcond_fu_195_p2 = (step_reg_129 == ap_const_lv5_19? 1'b1: 1'b0);
assign grp_fu_144_ce = ap_const_logic_1;
assign grp_fu_148_ce = ap_const_logic_1;
assign grp_fu_148_p1 = tmp_3_reg_269;
assign grp_fu_152_ce = ap_const_logic_1;
assign grp_fu_152_p0 = $unsigned(tmp_2_fu_211_p2);
assign grp_fu_155_ce = ap_const_logic_1;
assign grp_fu_155_opcode = ap_const_lv5_4;
assign grp_fu_155_p0 = current_fu_38;
assign grp_fu_155_p1 = theta;
assign s = Y_fu_46;
assign step_1_fu_201_p2 = (step_reg_129 + ap_const_lv5_1);
assign tmp_1_cast_fu_207_p1 = $unsigned(step_reg_129);
assign tmp_1_fu_226_p1 = $unsigned(step_reg_129);
assign tmp_2_fu_211_p2 = ap_const_lv25_1 << tmp_1_cast_fu_207_p1;


endmodule //cordic

